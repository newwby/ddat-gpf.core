
Rebuild as modular scene, separate from mn_mm to be drag+drop into any project, focus on readability
Input Panel should be a separate scene from Config Panel
Reliance on Godot InputMap (extension?) and Input Json

current implementation
###
submenu options _ready
#
calls connect_input_buttons_to_input_prompt_popup
	uses get_tree().get_nodes_in_group("options_button_input"):
		var action_name = get_button_action(button_node)
		var platform_id = get_button_platform(button_node)
		button_node.connect("pressed",\
		 $InputPromptPopup, "_on_Controls_call_input_prompt",\
		 [button_node, action_name, platform_id])#, owner_node])
# get button action and get button platform do ugly get_parent stuff,
uses groups to return platform_id (from globalRef)
# make inpupt prompt a dedicated scene which ties into globalInputManager

calls controls_tab_node.set_input_node_properties(load_input_settings_from_disk())
load_input_settings_from_disk > passes input map data from usr:// or res://
 # can be replaced with globalData refactor when ready
set_input_node_properties > calls global data for save/load inputMap json
 # rework with map to inputEvent object from json fields?

has really janky implementation for controller shoulder button scrolling tabs

options_controls_input_action_entry _ready
	populate_action_input_dict()
	update_all_buttons()
	convert_action_string_to_base_node_name_label(name)
# populate_action_input_dict > this is what a globalInput should replace, doesn't need to be separated from json/inputAction class
# update all buttons changes button textures whenever anything changes, use group and signal to auto update instead of call? emit signal on key change
# convert action string to base node name label - just have a different field for this

clicking a button brings up the input prompt
then to _on_InputPromptPopup_return_input which returns a target button and the new input
calls	if mouse	set_button_input_label/get_mouse_button_string,
		if key		
		if joypad	convert_input_event_to_input_constant, set_button_input_texture
	then store_recent_input_event
store_recent_input_event calls update_project_input_map ()
update_project_input_map erases events just re-adds
# 

active platform is only revent for/just a visual (button texture/label) change

#########
# need to auto generate input remapping controls per action (in a scroll field) for options
# ability to have alt action for inputMap by appending _alt on the end of the action
# joypad buttons share an input/alt input

# auto update child texture button icon textures when a new input is authenticated
# add toggle for kbm/joypad controls (don't have input setting options for all at once)
# include alternate platform symbols as a toggle too (auto-detect default)
# use text label for texture icons if they can't be found

# introduce unit testing for remapping

- [ ] Implement button input variance under a Input extension:
	- [ ] Double Tapping
	- [ ] Press and Hold Signal Emit
	- [ ] Combo Input

return from input popup should pass an input object (globalInput extended?)
- [ ] 
- [ ] 
- [ ] input authentication should change all joypad input buttons
- [ ] 
- [ ] move functionality from _on_InputPromptPopup_return_input to input action entry scenes
- [ ] BUGFIX inputeventkey on pc platform (id 0) throws an error, potentially checking the released action as well as pressed?
- [ ] Impelement writing projectInputMap to game fallback def (res://def) on first/empty def load
- [ ] combine get_mouse_button_string & convert_mouse_button_list_constant_to_string
